# ================================================================
# 📝 MMOSpawnPoint Configuration Examples
#
# 💬 All messages support MiniMessage formatting!
#     → Examples: <red>Error!</red>, <green>Success!</green>
#     → Web editor: https://webui.advntr.dev/
#
# 🌍 LOCALIZATION NOTE:
#     Direct localization is not supported in this plugin.
#     If you need multi-language support, use Triton plugin:
#     → https://www.spigotmc.org/resources/triton.30331/
# ================================================================


# ================================================================
# 📁 PROFESSIONAL FOLDER STRUCTURE (Recommended Organization)
# ================================================================
# Place your configs in: plugins/MMOSpawnPoint/spawnpoints/
#
# ORGANIZATION STRATEGY: WORLD → FEATURE → SPECIFIC AREA
# Maximum depth: 9 nested folders (config.yml: settings.maintenance.maxFolderDepth)
# Each .yml file MUST contain a top-level key: "spawns"
#
# spawnpoints/
# ├── world/                    # 🌍 Overworld spawns
# │   ├── cities/              # 🏙️ Urban areas
# │   │   ├── spawn-city.yml         # Main spawn city
# │   │   ├── trade-district.yml     # Commercial area
# │   │   └── residential.yml       # Housing districts
# │   ├── dungeons/            # ⚔️ PvE content
# │   │   ├── forest/
# │   │   │   ├── entrance-checkpoint.yml
# │   │   │   ├── boss-arena.yml
# │   │   │   └── treasure-room.yml
# │   │   ├── desert/
# │   │   │   ├── temple-spawns.yml
# │   │   │   └── pyramid-levels.yml
# │   │   └── underwater/
# │   │       ├── atlantis-gates.yml
# │   │       └── deep-caverns.yml
# │   ├── pvp/                 # ⚔️ Player vs Player
# │   │   ├── arena-coordinates.yml  # Coordinate-based triggers
# │   │   ├── battlegrounds-regions.yml # WorldGuard regions
# │   │   ├── factions-war.yml      # Faction territories
# │   │   └── tournaments.yml       # Event areas
# │   ├── villages/            # 🏘️ NPC settlements
# │   │   ├── starter-village.yml   # Newbie area
# │   │   ├── merchant-town.yml     # Trading hub
# │   │   └── quest-outpost.yml     # Adventure starting point
# │   ├── wilderness/          # 🌲 Open world
# │   │   ├── random-spawn.yml      # Survival spawns
# │   │   ├── resource-areas.yml    # Mining/farming zones
# │   │   └── exploration.yml       # Discovery locations
# │   └── transport/           # 🚂 Travel systems
# │       ├── waypoints.yml         # Fast travel points
# │       ├── portals.yml           # Dimension gates
# │       └── airships.yml          # Flying transport
# ├── world_nether/             # 🔥 Nether dimension
# │   ├── fortresses/          # 🏰 Nether structures
# │   │   ├── blaze-farm.yml        # Mob farming areas
# │   │   └── wither-arena.yml      # Boss fights
# │   ├── emergency/           # 🚨 Safety systems
# │   │   ├── safety-exits.yml      # Emergency teleports
# │   │   └── rescue-points.yml     # Recovery areas
# │   └── highways/            # 🛤️ Nether transportation
# │       ├── main-hub.yml          # Central station
# │       └── tunnel-exits.yml      # Highway endpoints
# ├── world_the_end/            # 🌌 End dimension
# │   ├── dragon-fight/        # 🐲 Boss encounter
# │   │   ├── platform-spawns.yml   # Fighting arena
# │   │   └── spectator-area.yml    # Observation deck
# │   ├── end-cities/          # 🏙️ End structures
# │   │   ├── exploration.yml       # City exploration
# │   │   └── elytra-course.yml     # Flying challenges
# │   └── void-safety/         # 🕳️ Void protection
# │       └── emergency-platforms.yml
# ├── custom_dimensions/        # 🌈 Modded/Custom worlds
# │   ├── skyblock/
# │   │   ├── island-spawns.yml     # Island management
# │   │   └── void-protection.yml   # Fall safety
# │   ├── creative/
# │   │   ├── plot-spawns.yml       # Creative plots
# │   │   └── showcase-areas.yml    # Build displays
# │   └── minigames/
# │       ├── parkour.yml           # Jumping courses
# │       ├── spleef.yml            # Digging games
# │       └── races.yml             # Speed competitions
# ├── global/                   # 🌐 Cross-world configurations
# │   ├── ranks/               # 👑 Permission-based spawns
# │   │   ├── vip-access.yml        # Premium player areas
# │   │   ├── staff-areas.yml       # Admin/mod zones
# │   │   └── donor-rewards.yml     # Supporter benefits
# │   ├── events/              # 🎉 Special occasions
# │   │   ├── seasonal/
# │   │   │   ├── christmas.yml     # Holiday events
# │   │   │   ├── halloween.yml     # Spooky season
# │   │   │   └── summer-fest.yml   # Seasonal celebrations
# │   │   ├── competitions/
# │   │   │   ├── build-contest.yml # Building competitions
# │   │   │   └── pvp-tournament.yml # Combat events
# │   │   └── server-anniversary.yml # Special milestones
# │   ├── maintenance/         # 🔧 Server management
# │   │   ├── fallback-spawns.yml   # Emergency spawns
# │   │   ├── testing-area.yml      # Admin testing zone
# │   │   └── quarantine.yml        # Problem isolation
# │   └── integration/         # 🔗 Plugin compatibility
# │       ├── mythicdungeons.yml    # Dungeon plugin support
# │       ├── factions-bypass.yml   # Faction integration
# │       └── jobs-areas.yml        # Economy plugin zones
# └── examples.txt              # 📖 This documentation file
#
# Each .yml file must contain a top-level key: spawns
#
# ================================================================
# 💡 PROFESSIONAL TIPS
# ================================================================
#
# 🎯 NAMING CONVENTIONS:
# - Use descriptive, lowercase names with hyphens
# - Group related spawns in folders by functionality
# - Prefix temporary configs with "temp-" for easy cleanup


# ================================================================
# 🔌 Hooks and strict validation
# ================================================================
# - WorldGuard integration (kind: region):
#     Requires main-config.hooks.useWorldGuard=true AND WorldGuard plugin installed.
#     The validator will FAIL if you define region spawns without WG enabled & present.
#
# - PlaceholderAPI (placeholders in conditions/actions):
#     Requires main-config.hooks.usePlaceholderAPI=true AND PlaceholderAPI installed.
#     The validator will FAIL if placeholders are used without PAPI enabled & present.


# ================================================================
# 🔢 Priorities (how entries are ordered)
# ================================================================
# - Priority is OPTIONAL in spawn entries. If not specified, defaults from main config are used:
#     • coordinate: config.yml → settings.defaultPriorities.coordinate (default: 100)
#     • region: config.yml → settings.defaultPriorities.region (default: 50)
#     • world: config.yml → settings.defaultPriorities.world (default: 10)
#
# - Higher number = higher priority (0..9999)
# - First matching spawn with highest priority is used
#
# Strategy tips:
# - For simple setups: rely on main config defaults, adjust only when needed
# - For map packs: use very high priorities (1500+) to override client's defaults
# - Always include a low-priority world fallback for safety


# ================================================================
# 🧭 General tips
# ================================================================
# - Omit Y axis in triggerArea if height doesn't matter:
#   This ensures the area triggers regardless of player altitude (useful for multi-floor dungeons)
#
# - groundWhitelist behavior:
#   When specified, it REPLACES globalGroundBlacklist from main config for that destination
#   You explicitly control which blocks are safe to stand on
#
# - Waiting rooms:
#   Automatically used when destination.requireSafe=true and safe location search is needed
#   You can define per-entry waitingRoom or rely on global one from main config
#
# - Performance tips:
#   • Use requireSafe=false for guaranteed safe locations
#   • Prefer smaller coordinate ranges over huge areas
#   • Keep weighted destinations count reasonable (5-10 max per entry)
#
# - Debugging:
#   Enable settings.debugMode=true in config.yml to see priority order and detailed logs
#
# - Party system:
#   Use partyRespawnDisabled: true in PvP areas or other restricted zones


# ================================================================
# ✅ Example 1: Simple world join spawn (hub)
# ================================================================
# Players joining "world" get teleported to exact coordinates
# File: spawnpoints/world/hub.yml

spawns:
- kind: world
  event: joins
  world: world
  destinations:
  - world: world
    requireSafe: false
    x: 0
    y: 64
    z: 0
    yaw: 180
    pitch: 0
    actions:
      messages:
      - text: "<green>Welcome to the hub!"
        phases: [AFTER]


# ================================================================
# ✅ Example 2: Coordinate area with safe search
# ================================================================
# Deaths in area [-100..100, any Y, -100..100] → search for safe spot in smaller area
# Note: triggerArea.y is omitted = works at any height
# File: spawnpoints/world/death-area.yml

spawns:
- kind: coordinate
  event: deaths
  triggerArea:
    world: world
    x: { min: -100, max: 100 }
    z: { min: -100, max: 100 }
  destinations:
  - world: world
    requireSafe: true
    x: { min: -50, max: 50 }
    z: { min: -50, max: 50 }
    groundWhitelist:
    - STONE
    - GRASS_BLOCK
    - DIRT
    actions:
      messages:
      - text: "<green>Found a safe spot nearby!"
        phases: [AFTER]
  actions:
    messages:
    - text: "<yellow>Searching for safe location..."
      phases: [WAITING_ROOM]
  waitingRoom:
    world: world
    x: 0
    y: 120
    z: 0

# Notes on groundWhitelist (how safe search works):
# - groundWhitelist only has effect when requireSafe: true.
# - It REPLACES globalGroundBlacklist, but ONLY for the ground block under the player’s feet (y-1).
# - globalPassableBlacklist still applies to feet/head (water, lava, cobweb, powder snow, etc.).
# - Fixed-point search: if x/z are fixed values and requireSafe is true, the plugin searches around that point within settings.safeLocationRadius (expands radius mid-way if needed).
# - Area search: if x/z are ranges and requireSafe is true, the plugin searches INSIDE the specified rectangle.
# - Y selection:
#  - Overworld uses the strategy from settings.teleport.ySelection (mixed/highest/random).
#  - Nether uses a solid-ground-with-2-air check within configured bounds.
# - Fallback behavior:
#   - If no whitelisted ground is found within settings.maxSafeLocationAttempts, the current implementation falls back (e.g., world spawn or area center). If you need “strict” behavior (no fallback), return null from the finder and handle it via waiting room timeout.
# - Tips:
#   - Keep search areas reasonable in size.
#   - Increase safeLocationRadius and/or maxSafeLocationAttempts if your whitelist is rare.
#   - Prefer requireSafe: false for known-safe, prebuilt spawn pads.


# ================================================================
# ✅ Example 3: WorldGuard region spawn (requires WorldGuard)
# ================================================================
# Players dying/joining in region "spawn" → two weighted destinations
# File: spawnpoints/world/region-spawn.yml

spawns:
- kind: region
  event: both
  priority: 800
  region: spawn
  regionWorld: world
  destinations:
  - world: world
    requireSafe: true
    x: { min: -10, max: 10 }
    z: { min: -10, max: 10 }
    weight: 70
  - world: world
    requireSafe: true
    x: 20
    z: 20
    weight: 30
  actions:
    messages:
    - text: "<gray>Region spawn activated"
      phases: [BEFORE]
  partyRespawnDisabled: true


# ================================================================
# ✅ Example 4: Advanced weighted spawns with conditions
# ================================================================
# VIP players get higher chance for better spawn point
# File: spawnpoints/world/vip-spawn.yml

spawns:
- kind: world
  event: joins
  world: world
  destinations:
  - world: world
    requireSafe: false
    x: -10
    y: 64
    z: -10
    weight: 100
  - world: world
    requireSafe: false
    x: 10
    y: 64
    z: 10
    weight: 50
    weightConditions:
    - type: permission
      value: mmospawnpoint.vip
      weight: 200
  conditions:
    permissions:
    - mmospawnpoint.join
    placeholders:
    - "%player_gamemode% == 'SURVIVAL'"
  actions:
    messages:
    - text: "<green>Conditions passed, teleporting..."
      phases: [BEFORE]

# Requires: hooks.usePlaceholderAPI=true and PlaceholderAPI installed


# ================================================================
# ✅ Example 5: Regex patterns for flexible matching
# ================================================================
# Match multiple worlds with regex pattern
# File: spawnpoints/global/dungeon-worlds.yml

spawns:
- kind: world
  event: deaths
  world: "dungeon_.*"
  worldMatchMode: regex
  destinations:
  - world: world
    requireSafe: true
    x: 0
    y: 64
    z: 0
  actions:
    messages:
    - text: "<red>Escaped from dungeon!"
      phases: [AFTER]


# ================================================================
# ⚠️ Example 6: "Void Trap" using setspawnpoint command
# ================================================================
# Actions-only spawn that sets player's bed spawn to current location
# Creates a "trap" where player will respawn here on future deaths
#
# IMPORTANT: Requires PlaceholderAPI + Player expansion for %player_world%, %player_x% etc.
#
# How it works:
# - Uses plugin command "msp setspawnpoint" to forcibly set player's vanilla respawn point
# - Plugin uses force=true, so no actual bed is required
# - On future deaths, if no higher-priority MMOSpawnPoint rules match,
#   server will respawn player at this bed location (the "trap")
# - Works across dimensions (overworld/nether/end)
#
# File: spawnpoints/global/void-trap.yml

spawns:
- kind: world
  event: deaths
  priority: 1900
  world: cursed_world
  destinations: []  # actions only, no teleport
  actions:
    messages:
    - text: "<dark_gray>[<red>Curse</red>] <gray>Your soul is now bound to this realm..."
      phases: [BEFORE]
    commands:
    - command: "msp setspawnpoint %player% %player_world% %player_x% %player_y% %player_z% %player_yaw% %player_pitch%"
      chance: 100
      phases: [AFTER]

# Warning: Ensure target world exists and no higher-priority death spawns override this trap


# ================================================================
# ✅ Example 7: Complex command conditions with multiple chances
# ================================================================
# Commands with different chances based on player conditions
# File: spawnpoints/world/mining-rewards.yml

spawns:
- kind: coordinate
  event: deaths
  triggerArea:
    world: world
    x: { min: 1000, max: 2000 }
    z: { min: 1000, max: 2000 }
  destinations:
  - world: world
    requireSafe: false
    x: 1500
    y: 64
    z: 1500
  actions:
    commands:
    - command: "give %player% diamond 1"
      chance: 10
      chanceConditions:
      - type: permission
        value: mmospawnpoint.vip
        weight: 25
    - command: "give %player% emerald 5"
      chance: 0
      chanceConditions:
      - type: placeholder
        value: "%player_level% > 50"
        weight: 100
    - command: "give %player% iron_ingot 3"
      chance: 30
      phases: [AFTER]


# ================================================================
# ✅ Example 8: Low-priority world fallback (safety net)
# ================================================================
# Recommended safety net: always have one low-priority world spawn
# Catches players who die "in the middle of nowhere"
# File: spawnpoints/global/fallback.yml

spawns:
- kind: world
  event: deaths
  priority: 50
  world: world
  destinations:
  - world: world
    requireSafe: true
    x: { min: -100, max: 100 }
    z: { min: -100, max: 100 }
  actions:
    messages:
    - text: "<yellow>Fallback spawn - searching for safe location..."
      phases: [WAITING_ROOM]


# ================================================================
# ✅ Example 9: Multiple match modes showcase
# ================================================================
# Shows different matching strategies in one file
# File: spawnpoints/global/match-examples.yml

spawns:
# Exact region match
- kind: region
  event: deaths
  region: boss_room
  regionMatchMode: exact
  regionWorld: dungeon_world
  destinations:
  - world: world
    x: 0
    y: 64
    z: 0

# Regex region pattern (matches boss_room_1, boss_room_2, etc.)
- kind: region
  event: deaths
  region: "boss_room_\\d+"
  regionMatchMode: regex
  destinations:
  - world: world
    x: 100
    y: 64
    z: 100

# Multiple world pattern
- kind: world
  event: joins
  world: "(creative|building)_world"
  worldMatchMode: regex
  destinations:
  - world: world
    x: 0
    y: 64
    z: 0

# ================================================================
# ✅ Example 10: VIP Tiers with Economy-Based Upgrades
# ================================================================
# Demonstrates advanced command conditions and economy integration
# VIP players get closer spawn, rich players get premium menu access
# File: spawnpoints/world/vip-economy-spawn.yml

spawns:
- kind: world
  event: deaths
  priority: 1500
  world: world
  conditions:
    permissions:
    - "mmospawnpoint.vip"
  destinations:
  # VIP Destination 1: Close premium spawn for VIP players
  - world: world
    requireSafe: true
    x: { min: 0, max: 20 }
    z: { min: 0, max: 20 }
    weight: 80
    actions:
      messages:
      - text: "<gold>🌟 VIP spawn activated - premium location!"
        phases: [AFTER]
      commands:
      # Economy-conditional premium menu access
      - command: "dm open premium_spawn_menu %player%"
        chance: 0  # 0% base chance
        phases: [AFTER]
        chanceConditions:
        - type: permission
          value: mmospawnpoint.vip
          weight: 100  # 100% chance if has mmospawnpoint.vip permission
      # VIP-only healing boost
      - command: "effect give %player% minecraft:regeneration 30 2"
        chance: 100
        phases: [AFTER]

  # VIP Destination 2: Fallback spawn for VIP (further away)
  - world: world
    requireSafe: true
    x: { min: 50, max: 100 }
    z: { min: 50, max: 100 }
    weight: 20
    actions:
      messages:
      - text: "<yellow>🥉 VIP fallback spawn - standard location"
        phases: [AFTER]
      commands:
      # Rich players still get menu even at fallback spawn
      - command: "dm open standard_spawn_menu %player%"
        chance: 0
        phases: [AFTER]
        chanceConditions:
        - type: placeholder
          value: "%vault_eco_balance_fixed% < 500"
          weight: 100
      # Different upgrade offer for rich players at fallback spawn
      - command: "tellraw %player% {\"text\":\"💰 You have enough money! Click to upgrade to premium spawn\",\"color\":\"gold\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"/upgrade premium_spawn\"}}"
        chance: 0
        phases: [AFTER]
        chanceConditions:
        - type: placeholder
          value: "%vault_eco_balance_fixed% >= 500"
          weight: 100

  actions:
    messages:
    - text: "<blue>🔍 Searching for VIP spawn location..."
      phases: [WAITING_ROOM]
    - text: "<green>✨ VIP processing complete!"
      phases: [BEFORE]


# ================================================================
# 🧩 For map creators (practical guide)
# ================================================================

# ─── Priority Strategy ───
# Option A: Use very high priorities (1500+) to override client's main config defaults
# Option B: Rely on client's main config defaults and adjust only when needed
# Both approaches are valid - choose based on your project needs

# ─── Fallback Strategy ───
# Always include a low-priority world spawn as safety net:
spawns:
- kind: world
  event: deaths
  priority: 100  # Low priority fallback
  world: world
  destinations:
  - world: world
    requireSafe: true
    x: { min: -50, max: 50 }
    z: { min: -50, max: 50 }

# ─── Optional Premium Features ───
# If your map uses optional plugins, comment them out with clear instructions:

# spawns:
# - kind: world
#   event: deaths
#   world: world
#   conditions:
#     # Requires MMOCore plugin:
#     # placeholders:
#     # - "%mmocore_level% > 20"
#     # - "%mmocore_class% == 'WARRIOR'"
#   destinations:
#   - world: world
#     x: 0
#     y: 64
#     z: 0

# ─── Area Design Tips ───
# • Omit triggerArea.y for multi-floor dungeons (matches any height)
# • Use small coordinate ranges for performance
# • Place specific areas before general ones (priority-wise)
# • Test with /msp simulate death and /msp simulate join commands

# ─── WorldGuard Integration ───
# If using regions, ensure your clients have WorldGuard enabled:
# 1. hooks.useWorldGuard=true in main config
# 2. WorldGuard plugin installed
# 3. Regions properly defined

# ─── Performance Considerations ───
# • Prefer requireSafe=false for known safe locations
# • Limit weighted destinations per spawn (5-10 max)
# • Group related spawns in same files for better organization

# ─── Testing Commands ───
# • /msp simulate death    - test death spawns at current location
# • /msp simulate join     - test join spawns at current location
# • /msp simulate back     - return to previous location
# • /msp cache stats       - check safe location cache statistics
# • /msp cache clear       - clear safe location cache for testing


# ================================================================
# 🗃️ Quick reference (most common patterns)
# ================================================================

# Basic world spawn:
spawns:
- kind: world
  event: joins
  world: world
  destinations:
  - world: world
    x: 0
    y: 64
    z: 0

# Basic region spawn (requires WorldGuard):
spawns:
- kind: region
  event: deaths
  region: spawn
  destinations:
  - world: world
    requireSafe: true
    x: { min: -10, max: 10 }
    z: { min: -10, max: 10 }

# Basic coordinate area:
spawns:
- kind: coordinate
  event: deaths
  triggerArea:
    world: world
    x: { min: 100, max: 200 }
    z: { min: 100, max: 200 }
  destinations:
  - world: world
    requireSafe: true
    x: 150
    z: 150

# Actions only (no teleport):
spawns:
- kind: world
  event: deaths
  world: world
  actions:
    messages:
    - text: "<red>You died!"
    commands:
    - command: "heal %player%"
      chance: 100


# ================================================================
# 📚 Full feature showcase
# ================================================================
# This example demonstrates most available features:

spawns:
- kind: coordinate
  event: both
  priority: 1500
  triggerArea:
    world: world
    worldMatchMode: exact
    x: { min: 500, max: 1000 }
    z: { min: 500, max: 1000 }
  destinations:
  - world: world
    requireSafe: true
    x: { min: 700, max: 800 }
    z: { min: 700, max: 800 }
    yaw: { min: 0, max: 360 }
    weight: 80
    weightConditions:
    - type: permission
      value: mmospawnpoint.vip
      weight: 120
    - type: placeholder
      value: "%player_level% > 50"
      weight: 110
    waitingRoom:
      world: world
      x: 750
      y: 200
      z: 750
      yaw: 180
      pitch: 0
    actions:
      messages:
      - text: "<green>Premium destination reached!"
        phases: [AFTER]
      commands:
      - command: "effect give %player% minecraft:speed 30 1"
        chance: 100
        phases: [AFTER]
    actionExecutionMode: after
    groundWhitelist:
    - STONE
    - COBBLESTONE
  - world: world
    requireSafe: false
    x: 600
    y: 64
    z: 600
    weight: 20
    actions:
      messages:
      - text: "<yellow>Standard spawn point"
        phases: [AFTER]
    actionExecutionMode: before
  conditions:
    permissions:
    - "mmospawnpoint.access && (mmospawnpoint.vip || mmospawnpoint.member)"
    placeholders:
    - "%player_gamemode% == 'SURVIVAL'"
    - "%vault_eco_balance% > 100"
  actions:
    messages:
    - text: "<blue>Area conditions passed"
      phases: [BEFORE]
    - text: "<gray>Searching for best spawn point..."
      phases: [WAITING_ROOM]
    commands:
    - command: "title %player% subtitle \"<gray>Welcome to the area\""
      chance: 100
      phases: [BEFORE]
  waitingRoom:
    world: world
    x: 750
    y: 150
    z: 750
    yaw: 0
    pitch: 0
  partyRespawnDisabled: false